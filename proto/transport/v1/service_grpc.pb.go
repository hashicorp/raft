// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/transport/v1/service.proto

package transportv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftTransportServiceClient is the client API for RaftTransportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftTransportServiceClient interface {
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	AppendEntriesPipeline(ctx context.Context, opts ...grpc.CallOption) (RaftTransportService_AppendEntriesPipelineClient, error)
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	InstallSnapshot(ctx context.Context, opts ...grpc.CallOption) (RaftTransportService_InstallSnapshotClient, error)
	TimeoutNow(ctx context.Context, in *TimeoutNowRequest, opts ...grpc.CallOption) (*TimeoutNowResponse, error)
}

type raftTransportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftTransportServiceClient(cc grpc.ClientConnInterface) RaftTransportServiceClient {
	return &raftTransportServiceClient{cc}
}

func (c *raftTransportServiceClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.raft.transport.v1.RaftTransportService/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftTransportServiceClient) AppendEntriesPipeline(ctx context.Context, opts ...grpc.CallOption) (RaftTransportService_AppendEntriesPipelineClient, error) {
	stream, err := c.cc.NewStream(ctx, &RaftTransportService_ServiceDesc.Streams[0], "/hashicorp.raft.transport.v1.RaftTransportService/AppendEntriesPipeline", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftTransportServiceAppendEntriesPipelineClient{stream}
	return x, nil
}

type RaftTransportService_AppendEntriesPipelineClient interface {
	Send(*AppendEntriesRequest) error
	Recv() (*AppendEntriesResponse, error)
	grpc.ClientStream
}

type raftTransportServiceAppendEntriesPipelineClient struct {
	grpc.ClientStream
}

func (x *raftTransportServiceAppendEntriesPipelineClient) Send(m *AppendEntriesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftTransportServiceAppendEntriesPipelineClient) Recv() (*AppendEntriesResponse, error) {
	m := new(AppendEntriesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftTransportServiceClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.raft.transport.v1.RaftTransportService/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftTransportServiceClient) InstallSnapshot(ctx context.Context, opts ...grpc.CallOption) (RaftTransportService_InstallSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &RaftTransportService_ServiceDesc.Streams[1], "/hashicorp.raft.transport.v1.RaftTransportService/InstallSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftTransportServiceInstallSnapshotClient{stream}
	return x, nil
}

type RaftTransportService_InstallSnapshotClient interface {
	Send(*InstallSnapshotRequest) error
	Recv() (*InstallSnapshotResponse, error)
	grpc.ClientStream
}

type raftTransportServiceInstallSnapshotClient struct {
	grpc.ClientStream
}

func (x *raftTransportServiceInstallSnapshotClient) Send(m *InstallSnapshotRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftTransportServiceInstallSnapshotClient) Recv() (*InstallSnapshotResponse, error) {
	m := new(InstallSnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftTransportServiceClient) TimeoutNow(ctx context.Context, in *TimeoutNowRequest, opts ...grpc.CallOption) (*TimeoutNowResponse, error) {
	out := new(TimeoutNowResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.raft.transport.v1.RaftTransportService/TimeoutNow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftTransportServiceServer is the server API for RaftTransportService service.
// All implementations should embed UnimplementedRaftTransportServiceServer
// for forward compatibility
type RaftTransportServiceServer interface {
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	AppendEntriesPipeline(RaftTransportService_AppendEntriesPipelineServer) error
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	InstallSnapshot(RaftTransportService_InstallSnapshotServer) error
	TimeoutNow(context.Context, *TimeoutNowRequest) (*TimeoutNowResponse, error)
}

// UnimplementedRaftTransportServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRaftTransportServiceServer struct {
}

func (UnimplementedRaftTransportServiceServer) AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedRaftTransportServiceServer) AppendEntriesPipeline(RaftTransportService_AppendEntriesPipelineServer) error {
	return status.Errorf(codes.Unimplemented, "method AppendEntriesPipeline not implemented")
}
func (UnimplementedRaftTransportServiceServer) RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedRaftTransportServiceServer) InstallSnapshot(RaftTransportService_InstallSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method InstallSnapshot not implemented")
}
func (UnimplementedRaftTransportServiceServer) TimeoutNow(context.Context, *TimeoutNowRequest) (*TimeoutNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeoutNow not implemented")
}

// UnsafeRaftTransportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftTransportServiceServer will
// result in compilation errors.
type UnsafeRaftTransportServiceServer interface {
	mustEmbedUnimplementedRaftTransportServiceServer()
}

func RegisterRaftTransportServiceServer(s grpc.ServiceRegistrar, srv RaftTransportServiceServer) {
	s.RegisterService(&RaftTransportService_ServiceDesc, srv)
}

func _RaftTransportService_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftTransportServiceServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.raft.transport.v1.RaftTransportService/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftTransportServiceServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftTransportService_AppendEntriesPipeline_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftTransportServiceServer).AppendEntriesPipeline(&raftTransportServiceAppendEntriesPipelineServer{stream})
}

type RaftTransportService_AppendEntriesPipelineServer interface {
	Send(*AppendEntriesResponse) error
	Recv() (*AppendEntriesRequest, error)
	grpc.ServerStream
}

type raftTransportServiceAppendEntriesPipelineServer struct {
	grpc.ServerStream
}

func (x *raftTransportServiceAppendEntriesPipelineServer) Send(m *AppendEntriesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftTransportServiceAppendEntriesPipelineServer) Recv() (*AppendEntriesRequest, error) {
	m := new(AppendEntriesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RaftTransportService_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftTransportServiceServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.raft.transport.v1.RaftTransportService/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftTransportServiceServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftTransportService_InstallSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftTransportServiceServer).InstallSnapshot(&raftTransportServiceInstallSnapshotServer{stream})
}

type RaftTransportService_InstallSnapshotServer interface {
	Send(*InstallSnapshotResponse) error
	Recv() (*InstallSnapshotRequest, error)
	grpc.ServerStream
}

type raftTransportServiceInstallSnapshotServer struct {
	grpc.ServerStream
}

func (x *raftTransportServiceInstallSnapshotServer) Send(m *InstallSnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftTransportServiceInstallSnapshotServer) Recv() (*InstallSnapshotRequest, error) {
	m := new(InstallSnapshotRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RaftTransportService_TimeoutNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeoutNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftTransportServiceServer).TimeoutNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.raft.transport.v1.RaftTransportService/TimeoutNow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftTransportServiceServer).TimeoutNow(ctx, req.(*TimeoutNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftTransportService_ServiceDesc is the grpc.ServiceDesc for RaftTransportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftTransportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.raft.transport.v1.RaftTransportService",
	HandlerType: (*RaftTransportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _RaftTransportService_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _RaftTransportService_RequestVote_Handler,
		},
		{
			MethodName: "TimeoutNow",
			Handler:    _RaftTransportService_TimeoutNow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AppendEntriesPipeline",
			Handler:       _RaftTransportService_AppendEntriesPipeline_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "InstallSnapshot",
			Handler:       _RaftTransportService_InstallSnapshot_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/transport/v1/service.proto",
}
