// Code generated by mog. DO NOT EDIT.

package transportv1

import "github.com/hashicorp/raft"

func AppendEntriesRequestToStruct(s *AppendEntriesRequest, t *raft.AppendEntriesRequest) {
	if s == nil {
		return
	}
	if s.RpcHeader != nil {
		RPCHeaderToStruct(s.RpcHeader, &t.RPCHeader)
	}
	t.Term = s.Term
	t.PrevLogEntry = s.PreviousLogEntry
	t.PrevLogTerm = s.PreviousLogTerm
	{
		t.Entries = make([]*raft.Log, len(s.Entries))
		for i := range s.Entries {
			if s.Entries[i] != nil {
				var x raft.Log
				LogToStruct(s.Entries[i], &x)
				t.Entries[i] = &x
			}
		}
	}
	t.LeaderCommitIndex = s.LeaderCommitIndex
}
func AppendEntriesRequestFromStruct(t *raft.AppendEntriesRequest, s *AppendEntriesRequest) {
	if s == nil {
		return
	}
	{
		var x RPCHeader
		RPCHeaderFromStruct(&t.RPCHeader, &x)
		s.RpcHeader = &x
	}
	s.Term = t.Term
	s.PreviousLogEntry = t.PrevLogEntry
	s.PreviousLogTerm = t.PrevLogTerm
	{
		s.Entries = make([]*Log, len(t.Entries))
		for i := range t.Entries {
			if t.Entries[i] != nil {
				var x Log
				LogFromStruct(t.Entries[i], &x)
				s.Entries[i] = &x
			}
		}
	}
	s.LeaderCommitIndex = t.LeaderCommitIndex
}
func AppendEntriesResponseToStruct(s *AppendEntriesResponse, t *raft.AppendEntriesResponse) {
	if s == nil {
		return
	}
	if s.RpcHeader != nil {
		RPCHeaderToStruct(s.RpcHeader, &t.RPCHeader)
	}
	t.Term = s.Term
	t.LastLog = s.LastLog
	t.Success = s.Success
	t.NoRetryBackoff = s.NoRetryBackoff
}
func AppendEntriesResponseFromStruct(t *raft.AppendEntriesResponse, s *AppendEntriesResponse) {
	if s == nil {
		return
	}
	{
		var x RPCHeader
		RPCHeaderFromStruct(&t.RPCHeader, &x)
		s.RpcHeader = &x
	}
	s.Term = t.Term
	s.LastLog = t.LastLog
	s.Success = t.Success
	s.NoRetryBackoff = t.NoRetryBackoff
}
func InstallSnapshotMetadataToStruct(s *InstallSnapshotMetadata, t *raft.InstallSnapshotRequest) {
	if s == nil {
		return
	}
	if s.RpcHeader != nil {
		RPCHeaderToStruct(s.RpcHeader, &t.RPCHeader)
	}
	t.SnapshotVersion = raft.SnapshotVersion(s.SnapshotVersion)
	t.Term = s.Term
	t.LastLogIndex = s.LastLogIndex
	t.LastLogTerm = s.LastLogTerm
	t.Configuration = s.Configuration
	t.ConfigurationIndex = s.ConfigurationIndex
	t.Size = s.Size
}
func InstallSnapshotMetadataFromStruct(t *raft.InstallSnapshotRequest, s *InstallSnapshotMetadata) {
	if s == nil {
		return
	}
	{
		var x RPCHeader
		RPCHeaderFromStruct(&t.RPCHeader, &x)
		s.RpcHeader = &x
	}
	s.SnapshotVersion = int32(t.SnapshotVersion)
	s.Term = t.Term
	s.LastLogIndex = t.LastLogIndex
	s.LastLogTerm = t.LastLogTerm
	s.Configuration = t.Configuration
	s.ConfigurationIndex = t.ConfigurationIndex
	s.Size = t.Size
}
func InstallSnapshotResponseToStruct(s *InstallSnapshotResponse, t *raft.InstallSnapshotResponse) {
	if s == nil {
		return
	}
	if s.RpcHeader != nil {
		RPCHeaderToStruct(s.RpcHeader, &t.RPCHeader)
	}
	t.Term = s.Term
	t.Success = s.Success
}
func InstallSnapshotResponseFromStruct(t *raft.InstallSnapshotResponse, s *InstallSnapshotResponse) {
	if s == nil {
		return
	}
	{
		var x RPCHeader
		RPCHeaderFromStruct(&t.RPCHeader, &x)
		s.RpcHeader = &x
	}
	s.Term = t.Term
	s.Success = t.Success
}
func RequestVoteRequestToStruct(s *RequestVoteRequest, t *raft.RequestVoteRequest) {
	if s == nil {
		return
	}
	if s.RpcHeader != nil {
		RPCHeaderToStruct(s.RpcHeader, &t.RPCHeader)
	}
	t.Term = s.Term
	t.LastLogIndex = s.LastLogIndex
	t.LastLogTerm = s.LastLogTerm
	t.LeadershipTransfer = s.LeadershipTransfer
}
func RequestVoteRequestFromStruct(t *raft.RequestVoteRequest, s *RequestVoteRequest) {
	if s == nil {
		return
	}
	{
		var x RPCHeader
		RPCHeaderFromStruct(&t.RPCHeader, &x)
		s.RpcHeader = &x
	}
	s.Term = t.Term
	s.LastLogIndex = t.LastLogIndex
	s.LastLogTerm = t.LastLogTerm
	s.LeadershipTransfer = t.LeadershipTransfer
}
func RequestVoteResponseToStruct(s *RequestVoteResponse, t *raft.RequestVoteResponse) {
	if s == nil {
		return
	}
	if s.RpcHeader != nil {
		RPCHeaderToStruct(s.RpcHeader, &t.RPCHeader)
	}
	t.Term = s.Term
	t.Granted = s.Granted
}
func RequestVoteResponseFromStruct(t *raft.RequestVoteResponse, s *RequestVoteResponse) {
	if s == nil {
		return
	}
	{
		var x RPCHeader
		RPCHeaderFromStruct(&t.RPCHeader, &x)
		s.RpcHeader = &x
	}
	s.Term = t.Term
	s.Granted = t.Granted
}
func TimeoutNowRequestToStruct(s *TimeoutNowRequest, t *raft.TimeoutNowRequest) {
	if s == nil {
		return
	}
	if s.RpcHeader != nil {
		RPCHeaderToStruct(s.RpcHeader, &t.RPCHeader)
	}
}
func TimeoutNowRequestFromStruct(t *raft.TimeoutNowRequest, s *TimeoutNowRequest) {
	if s == nil {
		return
	}
	{
		var x RPCHeader
		RPCHeaderFromStruct(&t.RPCHeader, &x)
		s.RpcHeader = &x
	}
}
func TimeoutNowResponseToStruct(s *TimeoutNowResponse, t *raft.TimeoutNowResponse) {
	if s == nil {
		return
	}
	if s.RpcHeader != nil {
		RPCHeaderToStruct(s.RpcHeader, &t.RPCHeader)
	}
}
func TimeoutNowResponseFromStruct(t *raft.TimeoutNowResponse, s *TimeoutNowResponse) {
	if s == nil {
		return
	}
	{
		var x RPCHeader
		RPCHeaderFromStruct(&t.RPCHeader, &x)
		s.RpcHeader = &x
	}
}
